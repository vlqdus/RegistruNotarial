import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import sqlite3
import openpyxl

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("registry.db")
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS registry (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        act_number TEXT,
        date TEXT,
        full_name TEXT,
        birth_date TEXT,
        personal_id TEXT,
        act_type TEXT,
        state_fee TEXT,
        assistance_payment TEXT,
        notes TEXT
    )
''')
conn.commit()

# –§—É–Ω–∫—Ü–∏–∏
def save_record():
    values = tuple(entry.get().strip() for entry in entries)
    try:
        cursor.execute('''
            INSERT INTO registry (act_number, date, full_name, birth_date, personal_id,
                                  act_type, state_fee, assistance_payment, notes)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', values)
        conn.commit()
        status_label.config(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        display_records()

        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        for entry in entries:
            if isinstance(entry, tk.Entry):
                entry.delete(0, tk.END)
            elif isinstance(entry, ttk.Combobox):
                entry.set("")

    except Exception as e:
        status_label.config(text=f"‚ùå –û—à–∏–±–∫–∞: {e}")


def search_records():
    query = search_entry.get().strip()
    for row in table.get_children():
        table.delete(row)
    cursor.execute("""
        SELECT * FROM registry WHERE 
            full_name LIKE ? OR 
            birth_date LIKE ? OR 
            personal_id LIKE ? OR 
            act_number LIKE ?
    """, (f"%{query}%",)*4)
    for row in cursor.fetchall():
        table.insert('', 'end', values=row)


def display_records():
    for row in table.get_children():
        table.delete(row)
    cursor.execute("SELECT * FROM registry")
    for row in cursor.fetchall():
        table.insert('', 'end', values=row)


def delete_record():
    selected = table.selection()
    if not selected:
        messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    record_id = table.item(selected[0])['values'][0]
    cursor.execute("DELETE FROM registry WHERE id=?", (record_id,))
    conn.commit()
    display_records()
    status_label.config(text="‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")


def export_to_excel():
    cursor.execute("SELECT * FROM registry")
    rows = cursor.fetchall()
    workbook = openpyxl.Workbook()
    worksheet = workbook.active
    worksheet.title = "–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä"
    worksheet.append(columns)
    for row in rows:
        worksheet.append(row)
    filepath = filedialog.asksaveasfilename(defaultextension=".xlsx",
                                            filetypes=[("Excel —Ñ–∞–π–ª—ã", "*.xlsx")])
    if filepath:
        workbook.save(filepath)
        messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")


# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = tk.Tk()
app.title("–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä")
app.geometry("1280x720")
app.configure(bg="#2c2f33")

# –®—Ä–∏—Ñ—Ç—ã
font_base = ("Segoe UI", 12)
font_bold = ("Segoe UI", 12, "bold")
text_color = "#ffffff"

# -------------- –§–û–†–ú–ê --------------
form_frame = tk.Frame(app, bg="#2c2f33")
form_frame.pack(padx=20, pady=20, anchor="nw")

labels_text = [
    "–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞", "–î–∞—Ç–∞", "–§–ò–û", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID",
    "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞", "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞", "–û–ø–ª–∞—Ç–∞ –ø–æ–º–æ—â–∏", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
]
entries = []

act_types = [
    "–î–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏",
    "–î–æ–≥–æ–≤–æ—Ä –¥–∞—Ä–µ–Ω–∏—è",
    "–î–æ–≥–æ–≤–æ—Ä –∑–∞–π–º–∞",
    "–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã",
    "–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
    "–ó–∞–≤–µ—â–∞–Ω–∏–µ",
    "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
    "–î—Ä—É–≥–æ–µ"
]

for i, text in enumerate(labels_text):
    tk.Label(form_frame, text=text, font=font_base, bg="#2c2f33", fg=text_color)\
        .grid(row=i, column=0, sticky="w", pady=4)

    if text == "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞":
        combo = ttk.Combobox(form_frame, values=act_types, font=font_base, width=57)
        combo.grid(row=i, column=1, pady=4, padx=10)
        combo.set("")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ
        entries.append(combo)
    else:
        entry = tk.Entry(form_frame, width=60, font=font_base, bd=1, relief="solid",
                         bg="#2c2f33", fg="white", insertbackground="white")
        entry.grid(row=i, column=1, pady=4, padx=10)
        entries.append(entry)

tk.Button(form_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_record,
          bg="#007BFF", fg="white", font=font_bold,
          relief="flat", padx=15, pady=5).grid(row=len(labels_text), column=0, columnspan=2, pady=15)

status_label = tk.Label(form_frame, text="", bg="#2c2f33", fg="lightgreen", font=font_base)
status_label.grid(row=len(labels_text)+1, column=0, columnspan=2)

# -------------- –ü–û–ò–°–ö --------------
search_frame = tk.Frame(app, bg="#2c2f33")
search_frame.pack(padx=20, anchor="nw")

tk.Label(search_frame, text="üîç –ü–æ–∏—Å–∫:", font=font_base, bg="#2c2f33", fg=text_color).pack(side="left")
search_entry = tk.Entry(search_frame, width=40, font=font_base, bd=1, relief="solid",
                         bg="#444", fg="white", insertbackground="white")
search_entry.pack(side="left", padx=10)

tk.Button(search_frame, text="–ü–æ–∏—Å–∫", command=search_records,
          bg="#28a745", fg="white", font=font_bold,
          relief="flat", padx=10, pady=3).pack(side="left", padx=10)

tk.Button(search_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=delete_record,
          bg="#dc3545", fg="white", font=font_bold,
          relief="flat", padx=10, pady=3).pack(side="left", padx=10)

tk.Button(search_frame, text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", command=export_to_excel,
          bg="#17a2b8", fg="white", font=font_bold,
          relief="flat", padx=10, pady=3).pack(side="left", padx=10)

# -------------- –¢–ê–ë–õ–ò–¶–ê –° –ü–û–õ–ó–£–ù–ö–û–ú --------------
table_frame = tk.Frame(app, bg="#2c2f33")
table_frame.pack(padx=20, pady=20, fill="both", expand=True)

columns = (
    "ID", "–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞", "–î–∞—Ç–∞", "–§–ò–û", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID",
    "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞", "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞", "–û–ø–ª–∞—Ç–∞ –ø–æ–º–æ—â–∏", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
)

scroll_y = tk.Scrollbar(table_frame, orient="vertical")
scroll_y.pack(side="right", fill="y")

table = ttk.Treeview(table_frame, columns=columns, show='headings', yscrollcommand=scroll_y.set)

style = ttk.Style()
style.theme_use("default")
style.configure("Treeview",
                background="#444",
                foreground="white",
                rowheight=25,
                fieldbackground="#444",
                font=font_base)
style.configure("Treeview.Heading",
                background="#343a40",
                foreground="white",
                font=font_bold)

for col in columns:
    table.heading(col, text=col)
    table.column(col, width=150, anchor="w")

table.pack(fill="both", expand=True)
scroll_y.config(command=table.yview)

display_records()
app.mainloop()
